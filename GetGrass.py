{"cells":[{"source":["# Optional\n","# !git clone https://github.com/Evowake/GG.io.git\n","!ssh-keygen -t rsa -b 4096 -C \"3vo@tutanota.com\" -f /content/id_rsa"],"cell_type":"code","metadata":{"id":"Jx-W193WAqY-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!git remote add origin https://github.com/Evowake/GG.io.git\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"trS2K-qEPfLx","executionInfo":{"status":"ok","timestamp":1713075565896,"user_tz":420,"elapsed":396,"user":{"displayName":"Evo VI","userId":"10646789774509909672"}},"outputId":"edd2efb4-5eaa-4861-bba9-c7eccd212db3"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Reinitialized existing Git repository in /content/.git/\n","error: open(\"drive/MyDrive/\"On Photography\".gdoc\"): Operation not supported\n","error: unable to index file 'drive/MyDrive/\"On Photography\".gdoc'\n","fatal: adding files failed\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Wo8CPo9NQvZ5","executionInfo":{"status":"ok","timestamp":1713075656407,"user_tz":420,"elapsed":163,"user":{"displayName":"Evo VI","userId":"10646789774509909672"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Install dependencies\n","!pip install fake_useragent websockets_proxy loguru\n","\n","# Mount Google Drive (Optional)\n","# from google.colab import drive\n","# drive.mount('/content/drive')\n","\n","import asyncio\n","import json\n","import ssl\n","import time\n","import uuid\n","import random\n","import os\n","from loguru import logger\n","from websockets_proxy import Proxy, proxy_connect\n","from fake_useragent import UserAgent\n","from functools import wraps\n","\n","def handle_cancelled_error(coro):\n","    @wraps(coro)\n","    async def wrapper(*args, **kwargs):\n","        try:\n","            return await coro(*args, **kwargs)\n","        except asyncio.CancelledError:\n","            logger.error(f\"Task was cancelled for {kwargs.get('socks5_proxy')}\")\n","            raise\n","    return wrapper\n","\n","def retry_with_backoff(retries=3, delay=1, backoff=2):\n","    def retry_decorator(func):\n","        @wraps(func)\n","        async def wrapper(*args, **kwargs):\n","            nonlocal retries, delay\n","            while retries > 0:\n","                try:\n","                    return await func(*args, **kwargs)\n","                except (asyncio.TimeoutError, ConnectionError, TimeoutError) as e:\n","                    retries -= 1\n","                    logger.error(f'Retrying due to {type(e).__name__} in {delay} seconds...')\n","                    await asyncio.sleep(delay)\n","                    delay *= backoff\n","                except Exception as e:\n","                    logger.error(f'Unexpected error: {e}')\n","                    break\n","            return 'All attempts failed.'\n","        return wrapper\n","    return retry_decorator\n","\n","@handle_cancelled_error\n","@retry_with_backoff()\n","async def connect_to_wss(socks5_proxy, user_id):\n","    device_id = str(uuid.uuid3(uuid.NAMESPACE_DNS, socks5_proxy))\n","    logger.info(f\"Connecting with device ID: {device_id}\")\n","\n","    while True:\n","        try:\n","            await asyncio.sleep(random.uniform(0.1, 1.0)) # Introduce random delay\n","\n","            custom_headers = {\"User-Agent\": UserAgent().random}\n","\n","            ssl_context = ssl.create_default_context()\n","            ssl_context.check_hostname = False\n","            ssl_context.verify_mode = ssl.CERT_NONE\n","\n","            uri = \"wss://app.getgrass.io/\"\n","            server_hostname = \"app.getgrass.io\"\n","\n","            proxy = Proxy.from_url(socks5_proxy)\n","\n","            async with proxy_connect(uri, proxy=proxy, ssl=ssl_context, server_hostname=server_hostname, extra_headers=custom_headers) as websocket:\n","                async def send_ping():\n","                    while True:\n","                        send_message = json.dumps({\n","                            \"id\": str(uuid.uuid4()),\n","                            \"version\": \"1.0.0\",\n","                            \"action\": \"PING\",\n","                            \"data\": {}\n","                        })\n","                        logger.debug(send_message)\n","                        await websocket.send(send_message)\n","                        await asyncio.sleep(20)\n","\n","                asyncio.create_task(send_ping())\n","\n","                while True:\n","                    response = await websocket.recv()\n","                    message = json.loads(response)\n","                    logger.info(message)\n","\n","                    if message.get(\"action\") == \"AUTH\":\n","                        auth_response = {\n","                            \"id\": message[\"id\"],\n","                            \"origin_action\": \"AUTH\",\n","                            \"result\": {\n","                                \"browser_id\": device_id,\n","                                \"user_id\": user_id,\n","                                \"user_agent\": custom_headers[\"User-Agent\"],\n","                                \"timestamp\": int(time.time()),\n","                                \"device_type\": \"extension\",\n","                                \"version\": \"3.3.2\"\n","                            }\n","                        }\n","                        logger.debug(auth_response)\n","                        await websocket.send(json.dumps(auth_response))\n","\n","                    elif message.get(\"action\") == \"PONG\":\n","                        pong_response = {\n","                            \"id\": message[\"id\"],\n","                            \"origin_action\": \"PONG\"\n","                        }\n","                        logger.debug(pong_response)\n","                        await websocket.send(json.dumps(pong_response))\n","\n","        except Exception as e:\n","            logger.error(e)\n","            if \"Empty connect reply\" in str(e):\n","                await remove_proxy_from_file(proxy_list_path, socks5_proxy[len(\"socks5://\"):])\n","\n","async def remove_proxy_from_file(file_path, proxy):\n","    logger.info(f\"Removing {proxy} from {file_path}\")\n","    if proxy.startswith(\"socks5://\"):\n","        proxy = proxy[len(\"socks5://\"):]\n","\n","    try:\n","        with open(file_path, \"r\") as file:\n","            proxies = file.readlines()\n","\n","        # Remove the original file\n","        os.remove(file_path)\n","\n","        # Create a new file without the proxy\n","        with open(file_path, \"w\") as file:\n","            for p in proxies:\n","                if p.strip() != proxy:\n","                    file.write(p)\n","\n","        logger.info(f\"{proxy} removed from {file_path}\")\n","    except Exception as e:\n","        logger.error(f\"Error removing {proxy} from {file_path}: {e}\")\n","\n","async def main():\n","    with open(\"user_id.txt\", \"r\") as file:\n","        _user_id = file.read().strip()\n","\n","    with open(\"proxy_list.txt\", \"r\") as file:\n","        socks5_proxy_list = file.read().splitlines()\n","\n","    for i, proxy in enumerate(socks5_proxy_list):\n","        if not proxy.startswith(\"socks5://\"):\n","            socks5_proxy_list[i] = 'socks5://' + proxy\n","\n","    tasks = []\n","    for proxy in socks5_proxy_list:\n","        try:\n","            task = asyncio.ensure_future(connect_to_wss(proxy, _user_id))\n","            tasks.append(task)\n","        except Exception as e:\n","            logger.error(f\"Error connecting to {proxy}: {e}\")\n","\n","    await asyncio.gather(*tasks, return_exceptions=True)\n","\n","# Directly call the main function in an asynchronous context\n","if __name__ == \"__main__\":\n","    try:\n","        await main()\n","    except KeyboardInterrupt:\n","        logger.info(\"Program terminated by user.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8xSFqbgLgUWK","outputId":"913e47d2-2de6-457b-f7d6-8f5f8dc9ef17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: fake_useragent in /usr/local/lib/python3.10/dist-packages (1.5.1)\n","Requirement already satisfied: websockets_proxy in /usr/local/lib/python3.10/dist-packages (0.1.2)\n","Requirement already satisfied: loguru in /usr/local/lib/python3.10/dist-packages (0.7.2)\n","Requirement already satisfied: python-socks[asyncio]==2.4.4 in /usr/local/lib/python3.10/dist-packages (from websockets_proxy) (2.4.4)\n","Requirement already satisfied: websockets in /usr/local/lib/python3.10/dist-packages (from websockets_proxy) (12.0)\n","Requirement already satisfied: async-timeout>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from python-socks[asyncio]==2.4.4->websockets_proxy) (4.0.3)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"FmPysjRb5096"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[],"mount_file_id":"1qZLedtXAnwRwp_ttEo89QXZ2mZmeoRgT","authorship_tag":"ABX9TyNiYPvJ0fE84SThTlT+5KvW"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}